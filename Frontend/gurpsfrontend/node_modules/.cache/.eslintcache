[{"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\index.js":"1","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\App.js":"2","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\reportWebVitals.js":"3","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\Header.js":"4","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\Sidebar.js":"5","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\OriginalGeneratorPage.js":"6","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\SpicyGeneratorPage.js":"7","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\tableInfoPage\\TableInfoPage.js":"8","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\GenerateBox.js":"9","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\loginSignUpPages\\LoginPage.js":"10","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\loginSignUpPages\\SignUpPage.js":"11","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\editTablesPage\\EditTablesPage.js":"12","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\Filters.js":"13","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\FilterSections\\ExtrasCheckboxes.js":"14","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\FilterSections\\FilterCheckboxes.js":"15"},{"size":593,"mtime":1636747601058,"results":"16","hashOfConfig":"17"},{"size":4043,"mtime":1637186161269,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":2395,"mtime":1636752328552,"results":"20","hashOfConfig":"17"},{"size":3924,"mtime":1637186215255,"results":"21","hashOfConfig":"17"},{"size":1572,"mtime":1637978952668,"results":"22","hashOfConfig":"17"},{"size":134,"mtime":1633744529913,"results":"23","hashOfConfig":"17"},{"size":123,"mtime":1633817047752,"results":"24","hashOfConfig":"17"},{"size":6082,"mtime":1637189634768,"results":"25","hashOfConfig":"17"},{"size":4007,"mtime":1637185888602,"results":"26","hashOfConfig":"17"},{"size":3607,"mtime":1636753237077,"results":"27","hashOfConfig":"17"},{"size":128,"mtime":1637186132685,"results":"28","hashOfConfig":"17"},{"size":1143,"mtime":1637979032646,"results":"29","hashOfConfig":"17"},{"size":1473,"mtime":1637978716921,"results":"30","hashOfConfig":"17"},{"size":1419,"mtime":1637978880799,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"168e5ej",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\index.js",[],["69","70"],"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\App.js",["71","72","73","74"],"import { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Route, Switch } from \"react-router\";\nimport OriginalGeneratorPage from \"./components/generatorPages/OriginalGeneratorPage\";\nimport SpicyGeneratorPage from \"./components/generatorPages/SpicyGeneratorPage\";\nimport Header from \"./components/Header\";\nimport Sidebar from \"./components/Sidebar\";\nimport TableInfoPage from \"./components/tableInfoPage/TableInfoPage\";\nimport { Fragment } from \"react/cjs/react.production.min\";\nimport \"./App.css\";\nimport LoginPage from \"./components/loginSignUpPages/LoginPage\";\nimport SignUpPage from \"./components/loginSignUpPages/SignUpPage\";\nimport EditTablesPage from \"./components/editTablesPage/EditTablesPage\";\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [userId, setUserId] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(null);\n\n  useEffect(() => {\n    //fetchUserData();\n\n    //The following is to simulate a call to fetchUserData()\n    //setIsLoggedIn(true);\n    setIsLoaded(\"loaded\");\n    setUserName(\"sldiener\");\n  }, [isLoggedIn]);\n\n  const fetchUserData = () => {\n    //Do userInfo fetch here and set returned values to state\n    fetch(\"http://localhost:5000/req/userInfo\", {\n      method: \"post\",\n      headers: {\n        //\"Content-Type\": \"application/json\",\n        //\"Access-Control-Allow-Credentials\": true,\n      },\n      //credentials: \"include\",\n      body: JSON.stringify({}),\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          //If there was an error fetching the data\n          if (result.response.apiStatusCode !== \"OK\") {\n            setIsLoaded(\"error\");\n            setIsLoggedIn(false);\n            return;\n          }\n          //If the user is not logged in\n          if (result.response.data.loggedIn === 0) {\n            setIsLoggedIn(false);\n            //setIsLoaded(\"incorrect\");\n            return;\n          }\n          //The user is logged in\n          if (result.response.data.loggedIn === 1) {\n            setIsLoggedIn(true);\n            setUserId(result.response.data.dealerid);\n            setUserName(result.response.data.dealerName);\n            setIsLoaded(\"loaded\");\n          }\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(\"error\");\n          //console.log(error);\n        }\n      );\n  };\n\n  return (\n    <PageWrapper>\n      <div>\n        <Header\n          userName={userName}\n          isLoggedIn={isLoggedIn}\n          setIsLoggedIn={setIsLoggedIn}\n        />\n        <div className=\"contentWrapper\">\n          <Sidebar isLoggedIn={isLoggedIn} />\n          <Switch>\n            <Route exact path=\"/\" component={OriginalGeneratorPage} />\n            <Route\n              path=\"/login\"\n              render={(props) => <LoginPage setIsLoggedIn={setIsLoggedIn} />}\n            />\n            <Route\n              path=\"/signup\"\n              render={(props) => <SignUpPage setIsLoggedIn={setIsLoggedIn} />}\n            />\n            {isLoggedIn && (\n              <Fragment>\n                <Route path=\"/spicygenerator\" component={SpicyGeneratorPage} />\n                <Route path=\"/tableinfo\" component={TableInfoPage} />\n                <Route path=\"/edittables\" component={EditTablesPage} />\n              </Fragment>\n            )}\n          </Switch>\n        </div>\n      </div>\n    </PageWrapper>\n  );\n}\n\nconst PageWrapper = styled.nav`\n  display: flex;\n\n  .contentWrapper {\n    display: flex;\n    flex-direction: row;\n    align-items: left;\n  }\n`;\n\nconst LoginPageWrapper = styled.nav`\n  display: flex !important;\n  align-items: center !important;\n  justify-content: center !important;\n  flex-direction: column;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n  color: red;\n`;\n\nexport default App;\n","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\reportWebVitals.js",[],"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\Header.js",["75"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport mainLogo from \"../images/mainLogo.jpg\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function Header({ userName, isLoggedIn, setIsLoggedIn }) {\r\n  document.body.style.margin = 0;\r\n  const history = useHistory();\r\n\r\n  const HandleLogoutClick = (e) => {\r\n    setIsLoggedIn(false);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <div className=\"headerMain\">\r\n        <img src={mainLogo} className=\"logo\" alt=\"GURPS Book image\"></img>\r\n        <div className=\"headerTitle\">GURPS Loot Random Generator</div>\r\n        <div className=\"headerSub\">\r\n          {isLoggedIn && (\r\n            <div>\r\n              <div>Welcome {userName}</div>\r\n              <Link className=\"mainLink\" to=\"/\">\r\n                <span onClick={HandleLogoutClick}>Logout</span>\r\n              </Link>\r\n            </div>\r\n          )}\r\n          {!isLoggedIn && (\r\n            <div className=\"links\">\r\n              <Link className=\"mainLink\" to=\"/login\">\r\n                Login\r\n              </Link>\r\n              <Link className=\"mainLink\" to=\"/signup\">\r\n                Create Account\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </PageWrapper>\r\n  );\r\n}\r\n\r\nconst PageWrapper = styled.nav`\r\n  position: -webkit-sticky;\r\n  position: sticky;\r\n  top: 0;\r\n  padding: 1rem 1.5rem;\r\n  background: var(--darkPurpleColor);\r\n  border-bottom: 5px solid var(--primaryOrangeColor);\r\n  z-index: 999;\r\n  width: 100%;\r\n  margin: 0;\r\n  .headerMain {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    flex-direction: row;\r\n    //max-width: 1500px;\r\n    margin: 5 auto;\r\n    width: 100%;\r\n  }\r\n  .headerTitle {\r\n    font-size: 2.5rem;\r\n    color: white;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.12rem;\r\n  }\r\n  .headerSub {\r\n    display: flex;\r\n    align-items: left;\r\n    flex-direction: column;\r\n    font-size: 1rem;\r\n    color: white;\r\n  }\r\n  .logo {\r\n    height: 50%;\r\n    width: 10%;\r\n  }\r\n  @media screen and (max-width: 500px) {\r\n    .headerMain {\r\n      float: none;\r\n      display: block;\r\n      text-align: left;\r\n    }\r\n    .header-right {\r\n      float: none;\r\n    }\r\n  }\r\n\r\n  .links {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 3px;\r\n  }\r\n`;\r\n","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\Sidebar.js",["76","77","78","79","80"],"import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nexport default function Sidebar({ isLoggedIn }) {\r\n  // return (\r\n  //   <PageWrapper>\r\n  //     <div>\r\n  //       <Link to=\"/\">Original Generator Page</Link>\r\n  //       {isLoggedIn && (\r\n  //         <div>\r\n  //           <Link to=\"/spicygenerator\">Spicy Generator Page</Link>\r\n  //           <Link>Table Info</Link>\r\n  //           <Link>Edit/Add Tables</Link>\r\n  //         </div>\r\n  //       )}\r\n  //     </div>\r\n  //   </PageWrapper>\r\n  // );\r\n\r\n  const location = useLocation();\r\n  //var to get the current page the user is on for highlighting that page\r\n  //on the navbar\r\n  let pageName = location.pathname.replaceAll(\"/\", \"\");\r\n  const [homeLit, setHomeLit] = useState(false);\r\n  const [registerLit, setRegisterLit] = useState(false);\r\n  //the current page the user is on. If they're on the homepage, replace\r\n  //the empty string with \"home\", otherwise use 'pageName'\r\n  const [currentPage, setCurrentPage] = useState(\r\n    pageName === \"\" ? \"home\" : pageName\r\n  );\r\n\r\n  return (\r\n    <SideWrapper>\r\n      <ul>\r\n        <li key={1}>\r\n          <Link\r\n            to=\"/\"\r\n            className={\r\n              \"sidebar-link \" + (currentPage === \"home\" ? \"lit\" : \"unlit\")\r\n            }\r\n            id=\"homeLink\"\r\n            onClick={() => setCurrentPage(\"home\")}\r\n          >\r\n            Original Generator\r\n          </Link>\r\n\r\n          {isLoggedIn && (\r\n            <div>\r\n              <Link\r\n                to=\"/spicygenerator\"\r\n                className={\r\n                  \"sidebar-link \" +\r\n                  (currentPage.includes(\"spicy\") ? \"lit\" : \"unlit\")\r\n                }\r\n                id=\"spicyGeneratorLink\"\r\n                onClick={() => setCurrentPage(\"spicygenerator\")}\r\n              >\r\n                Spicy Generator\r\n              </Link>\r\n              <Link\r\n                to=\"/tableinfo\"\r\n                className={\r\n                  \"sidebar-link \" +\r\n                  (currentPage === \"tableinfo\" ? \"lit\" : \"unlit\")\r\n                }\r\n                id=\"tableInfoLink\"\r\n                onClick={() => setCurrentPage(\"tableinfo\")}\r\n              >\r\n                Table Info\r\n              </Link>\r\n              <Link\r\n                to=\"/edittables\"\r\n                className={\r\n                  \"sidebar-link \" +\r\n                  (currentPage === \"edittables\" ? \"lit\" : \"unlit\")\r\n                }\r\n                id=\"editTablesLink\"\r\n                onClick={() => setCurrentPage(\"edittables\")}\r\n              >\r\n                Edit/Add Tables\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </li>\r\n      </ul>\r\n    </SideWrapper>\r\n  );\r\n}\r\n\r\nconst SideWrapper = styled.nav`\r\n  //position:fixed;\r\n  //top:200px;\r\n  //left:50px;\r\n  //width: 60px;\r\n  height: 180px;\r\n  background: var(--mainGrey);\r\n  //z-index:1;\r\n  //border-right:4px solid var(--primaryColor);\r\n  //border-bottom:4px solid var(--primaryColor);\r\n  //border-left:4px solid var(--primaryColor);\r\n  //border-top:4px solid var(--primaryColor);\r\n  transition: var(--mainTransition);\r\n  font-size: 20px !important;\r\n\r\n  margin: 10px;\r\n  ul {\r\n    list-style-type: none;\r\n    padding: 0 !important;\r\n  }\r\n  .sidebar-link {\r\n    display: block;\r\n    //font-size: 1.5rem;\r\n    text-transform: capitalize;\r\n    padding: 0.5rem 1rem;\r\n    font-size: 20px;\r\n    transition: var(--mainTransition);\r\n    text-decoration: none;\r\n    width: 80%;\r\n  }\r\n  .sidebar-link:hover {\r\n    background: #9b9b9b;\r\n    color: var(--mainWhite);\r\n    padding: 0.5rem 1.5rem 0.5rem 2.5rem;\r\n    text-decoration: none;\r\n  }\r\n  .lit {\r\n    color: var(--mainWhite);\r\n    background: var(--primaryOrangeColor);\r\n  }\r\n  .unlit {\r\n    color: var(--mainBlack);\r\n    background: var(--lightGrey);\r\n  }\r\n  @media (min-width: 576px) {\r\n    width: 20rem;\r\n  }\r\n`;\r\n","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\OriginalGeneratorPage.js",[],"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\SpicyGeneratorPage.js",[],"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\tableInfoPage\\TableInfoPage.js",[],"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\GenerateBox.js",["81","82","83","84","85","86","87"],"import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\nlet fakeData = [\r\n  {\r\n    item: \"AnItem\",\r\n    embelishments: \"fire\",\r\n    price: \"$30.50\",\r\n  },\r\n  {\r\n    item: \"AnotherItem\",\r\n    embelishments: \"none\",\r\n    price: \"$0.70\",\r\n  },\r\n  {\r\n    item: \"LastItem\",\r\n    embelishments: \"ice\",\r\n    price: \"$100000.90\",\r\n  },\r\n];\r\nexport default function GenerateBox({ typeBox, tables }) {\r\n  const [nextGenerated, setNextGenerated] = useState(\"\");\r\n  const [counter, setCounter] = useState(0);\r\n  const [isLoaded, setIsLoaded] = useState(\"\");\r\n  const [randResult, setRandResult] = useState(\"\");\r\n  const [numberGenerate, setNumberGenerate] = useState(1);\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    //setCounter(counter + 1);\r\n    //setNextGenerated(counter);\r\n\r\n    //Here is where you will make a call to the backend for information\r\n    //Pass it the tables to include, and other filters\r\n    if (numberGenerate.length < 1 || parseInt(numberGenerate) > 20) {\r\n      setIsLoaded(\"invalid\");\r\n      return;\r\n    }\r\n    setIsLoaded(\"okay\");\r\n    //doFetch(typeBox, tables);\r\n    setRandResult(fakeData);\r\n  };\r\n\r\n  const doFetch = (tablesToInclude) => {\r\n    fetch(\"http://localhost:5000/req/generate\", {\r\n      method: \"post\",\r\n      headers: {\r\n        //\"Content-Type\": \"application/json\",\r\n        //\"Access-Control-Allow-Credentials\": true,\r\n      },\r\n      //credentials: \"include\",\r\n      body: JSON.stringify({\r\n        tables: tablesToInclude,\r\n        numberGenerate: numberGenerate,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(result);\r\n          //If there was an error fetching the data\r\n          if (result.response.apiStatusCode !== \"OK\") {\r\n            setIsLoaded(\"error\");\r\n            return;\r\n          } else {\r\n            setRandResult(result.response);\r\n            setIsLoaded(\"loaded\");\r\n          }\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(\"error\");\r\n          //console.log(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Item\",\r\n        accessor: \"item\",\r\n      },\r\n      {\r\n        Header: \"Embelishments\",\r\n        accessor: \"embelishments\",\r\n      },\r\n      {\r\n        Header: \"Price\",\r\n        accessor: \"price\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns,\r\n        data: fakeData,\r\n      },\r\n      useSortBy\r\n    );\r\n\r\n  const handleRowClick = (e) => {\r\n    //do something\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    if (Number(e.target.value) || e.target.value === \"\") {\r\n      setNumberGenerate(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <div>\r\n        <form className=\"generate-form\">\r\n          <table {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map((headerGroup) => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map((column) => (\r\n                    <th\r\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    >\r\n                      {column.render(\"Header\")}\r\n                      <span>\r\n                        {column.isSorted\r\n                          ? column.isSortedDesc\r\n                            ? \"▼\"\r\n                            : \"▲\"\r\n                          : \" ▲▼\"}\r\n                      </span>\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {rows.map((row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr\r\n                    {...row.getRowProps()}\r\n                    key={i}\r\n                    onClick={() => handleRowClick(row)}\r\n                  >\r\n                    {row.cells.map((cell) => {\r\n                      return (\r\n                        <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"generateWrapper\">\r\n            <input\r\n              readOnly={false}\r\n              value={numberGenerate}\r\n              className=\"textBox\"\r\n              onChange={handleNumberChange}\r\n            />\r\n            <button className=\"mainBtn\" onClick={handleClick}>\r\n              Generate!\r\n            </button>\r\n          </div>\r\n          {isLoaded === \"invalid\" && (\r\n            <div className=\"errorMessage wrapText\">\r\n              Invalid Number to Generate. Please enter a number between 1-20.\r\n            </div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </PageWrapper>\r\n  );\r\n}\r\n\r\nconst PageWrapper = styled.nav`\r\n  display: flex;\r\n  flex-direction: column;\r\n  .wrapText {\r\n    max-width: 350px;\r\n    word-wrap: break-word;\r\n  }\r\n\r\n  .generateWrapper {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-top: 15px;\r\n  }\r\n  .generate-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 3px;\r\n  }\r\n  .textBox {\r\n    margin-bottom: 5px;\r\n  }\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n    tr:hover {\r\n      th {\r\n        background: var(--mainWhite);\r\n      }\r\n      background: var(--lightGrey);\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.15rem 0.15rem 0.15rem 0.35rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\loginSignUpPages\\LoginPage.js",["88"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function LoginPage({ setIsLoggedIn }) {\r\n  const [username, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isLoaded, setIsLoaded] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //If the user hasn't entered anything in the boxes, just return\r\n    if (username.length < 1 || password.length < 1) {\r\n      setIsLoaded(\"incorrect\");\r\n      return;\r\n    }\r\n    //The following will attempt to log the user in\r\n    //doFetch();\r\n\r\n    //The following is for testing purposes and is to simulate a call to the backend to log the user in\r\n    //setIsLoaded(\"incorrect\");\r\n    history.push(`/`);\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const doFetch = () => {\r\n    fetch(\"http://localhost:5000/req/login\", {\r\n      method: \"post\",\r\n      headers: {\r\n        //\"Content-Type\": \"application/json\",\r\n        //\"Access-Control-Allow-Credentials\": true,\r\n      },\r\n\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password,\r\n        //Send username and password\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(result);\r\n          //If error\r\n          if (result.response.apiStatusCode !== \"OK\") {\r\n            setIsLoaded(\"error\");\r\n            //return;\r\n          }\r\n          //If the user is not logged in\r\n          else if (result.response.data.loggedIn === 0) {\r\n            setIsLoggedIn(false);\r\n            setIsLoaded(\"incorrect\");\r\n            //return;\r\n          }\r\n          //The user is logged in\r\n          else if (result.response.data.loggedIn === 1) {\r\n            setIsLoggedIn(true);\r\n            //return;\r\n          }\r\n          //We somehow made it down here, just print the invalid message\r\n          else {\r\n            setIsLoaded(\"incorrect\");\r\n            setIsLoggedIn(false);\r\n          }\r\n          //The user is logged in\r\n          //setIsLoggedIn(true);\r\n          //console.log(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(\"error\");\r\n          console.log(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <form className=\"formWrapper\">\r\n        <div className=\"loginLabel\">GURPS Random Generator Login</div>\r\n        <div className=\"inputDiv\">\r\n          {/* <p>Username</p> */}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"username\"\r\n            onChange={(e) => setUserName(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"inputDiv\">\r\n          {/* <p>Password</p> */}\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button className=\"mainBtn\" onClick={handleSubmit}>\r\n            Sign in\r\n          </button>\r\n        </div>\r\n        {isLoaded === \"error\" && (\r\n          <div className=\"errorMessage\">Error logging in.</div>\r\n        )}\r\n        {isLoaded === \"incorrect\" && (\r\n          <div className=\"errorMessage\">\r\n            Incorrect username or password. Please try again.\r\n          </div>\r\n        )}\r\n      </form>\r\n    </PageWrapper>\r\n  );\r\n}\r\n\r\nconst PageWrapper = styled.nav`\r\n  /* .formWrapper {\r\n    display: flex !important;\r\n    justify-content: center !important;\r\n    height: 100% !important;\r\n    width: 100% !important;\r\n    flex-direction: column;\r\n    flex: 2;\r\n    align-items: stretch;\r\n    flex-grow: 1;\r\n  } */\r\n  .inputDiv {\r\n    margin-bottom: 5px;\r\n  }\r\n  .loginLabel {\r\n    font-size: 1.8rem;\r\n    font-weight: 400;\r\n    line-height: 1.5;\r\n    color: var(--mainBlack);\r\n  }\r\n`;\r\n","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\loginSignUpPages\\SignUpPage.js",["89"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function SignUpPage({ setIsLoggedIn }) {\r\n  const [username, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isLoaded, setIsLoaded] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //If the user hasn't entered anything in the boxes, just return\r\n    if (username.length < 1 || password.length < 8) {\r\n      setIsLoaded(\"incorrect\");\r\n      return;\r\n    }\r\n    //The following will attempt to log the user in\r\n    //doFetch();\r\n\r\n    //The following is for testing purposes and is to simulate a call to the backend to log the user in\r\n    //setIsLoaded(\"incorrect\");\r\n    history.push(\"/\");\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const doFetch = () => {\r\n    fetch(\"http://localhost:5000/req/signup\", {\r\n      method: \"post\",\r\n      headers: {\r\n        //\"Content-Type\": \"application/json\",\r\n        //\"Access-Control-Allow-Credentials\": true,\r\n      },\r\n\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password,\r\n        //Send username and password\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(result);\r\n          //If error\r\n          if (result.response.apiStatusCode !== \"OK\") {\r\n            setIsLoaded(\"error\");\r\n            //return;\r\n          }\r\n          //The sign up succeeded! Yay!\r\n          else {\r\n            setIsLoggedIn(true);\r\n            setIsLoaded(\"loaded\");\r\n          }\r\n          //The user is logged in\r\n          //setIsLoggedIn(true);\r\n          //console.log(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(\"error\");\r\n          console.log(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <form className=\"formWrapper\">\r\n        <div className=\"loginLabel\">GURPS Random Generator Sign Up</div>\r\n        <div className=\"inputDiv\">\r\n          {/* <p>Username</p> */}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"username\"\r\n            onChange={(e) => setUserName(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"inputDiv\">\r\n          {/* <p>Password</p> */}\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button className=\"mainBtn\" onClick={handleSubmit}>\r\n            Sign up!\r\n          </button>\r\n        </div>\r\n        {isLoaded === \"error\" && (\r\n          <div className=\"errorMessage\">Error signing up.</div>\r\n        )}\r\n        {isLoaded === \"incorrect\" && (\r\n          <div className=\"errorMessage\">\r\n            Please make sure your password is at least 8 characters.\r\n          </div>\r\n        )}\r\n      </form>\r\n    </PageWrapper>\r\n  );\r\n}\r\n\r\nconst PageWrapper = styled.nav`\r\n  /* .formWrapper {\r\n    display: flex !important;\r\n    justify-content: center !important;\r\n    height: 100% !important;\r\n    width: 100% !important;\r\n    flex-direction: column;\r\n    flex: 2;\r\n    align-items: stretch;\r\n    flex-grow: 1;\r\n  } */\r\n  .inputDiv {\r\n    margin-bottom: 5px;\r\n  }\r\n  .loginLabel {\r\n    font-size: 1.8rem;\r\n    font-weight: 400;\r\n    line-height: 1.5;\r\n    color: var(--mainBlack);\r\n  }\r\n`;\r\n","C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\editTablesPage\\EditTablesPage.js",[],"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\Filters.js",["90"],"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\FilterSections\\ExtrasCheckboxes.js",["91"],"C:\\Users\\sarah.diener\\Desktop\\School\\CIS560\\GroupProject\\CIS560TeamProject\\Frontend\\gurpsfrontend\\src\\components\\generatorPages\\FilterSections\\FilterCheckboxes.js",["92"],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":18,"column":10,"nodeType":"99","messageId":"100","endLine":18,"endColumn":16},{"ruleId":"97","severity":1,"message":"101","line":19,"column":10,"nodeType":"99","messageId":"100","endLine":19,"endColumn":18},{"ruleId":"97","severity":1,"message":"102","line":30,"column":9,"nodeType":"99","messageId":"100","endLine":30,"endColumn":22},{"ruleId":"97","severity":1,"message":"103","line":119,"column":7,"nodeType":"99","messageId":"100","endLine":119,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":19,"column":9,"nodeType":"106","endLine":19,"endColumn":69},{"ruleId":"97","severity":1,"message":"107","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":26},{"ruleId":"97","severity":1,"message":"108","line":25,"column":10,"nodeType":"99","messageId":"100","endLine":25,"endColumn":17},{"ruleId":"97","severity":1,"message":"109","line":25,"column":19,"nodeType":"99","messageId":"100","endLine":25,"endColumn":29},{"ruleId":"97","severity":1,"message":"110","line":26,"column":10,"nodeType":"99","messageId":"100","endLine":26,"endColumn":21},{"ruleId":"97","severity":1,"message":"111","line":26,"column":23,"nodeType":"99","messageId":"100","endLine":26,"endColumn":37},{"ruleId":"97","severity":1,"message":"107","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"112","line":23,"column":10,"nodeType":"99","messageId":"100","endLine":23,"endColumn":23},{"ruleId":"97","severity":1,"message":"113","line":23,"column":25,"nodeType":"99","messageId":"100","endLine":23,"endColumn":41},{"ruleId":"97","severity":1,"message":"114","line":24,"column":10,"nodeType":"99","messageId":"100","endLine":24,"endColumn":17},{"ruleId":"97","severity":1,"message":"115","line":24,"column":19,"nodeType":"99","messageId":"100","endLine":24,"endColumn":29},{"ruleId":"97","severity":1,"message":"116","line":26,"column":10,"nodeType":"99","messageId":"100","endLine":26,"endColumn":20},{"ruleId":"97","severity":1,"message":"117","line":45,"column":9,"nodeType":"99","messageId":"100","endLine":45,"endColumn":16},{"ruleId":"97","severity":1,"message":"117","line":27,"column":9,"nodeType":"99","messageId":"100","endLine":27,"endColumn":16},{"ruleId":"97","severity":1,"message":"117","line":27,"column":9,"nodeType":"99","messageId":"100","endLine":27,"endColumn":16},{"ruleId":"97","severity":1,"message":"118","line":3,"column":8,"nodeType":"99","messageId":"100","endLine":3,"endColumn":24},{"ruleId":"97","severity":1,"message":"119","line":28,"column":9,"nodeType":"99","messageId":"100","endLine":28,"endColumn":15},{"ruleId":"97","severity":1,"message":"119","line":28,"column":9,"nodeType":"99","messageId":"100","endLine":28,"endColumn":15},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'userId' is assigned a value but never used.","Identifier","unusedVar","'isLoaded' is assigned a value but never used.","'fetchUserData' is assigned a value but never used.","'LoginPageWrapper' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useEffect' is defined but never used.","'homeLit' is assigned a value but never used.","'setHomeLit' is assigned a value but never used.","'registerLit' is assigned a value but never used.","'setRegisterLit' is assigned a value but never used.","'nextGenerated' is assigned a value but never used.","'setNextGenerated' is assigned a value but never used.","'counter' is assigned a value but never used.","'setCounter' is assigned a value but never used.","'randResult' is assigned a value but never used.","'doFetch' is assigned a value but never used.","'ExtrasCheckboxes' is defined but never used.","'chkstr' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]