{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sarah.diener\\\\Desktop\\\\School\\\\CIS560\\\\GroupProject\\\\CIS560TeamProject\\\\Frontend\\\\gurpsfrontend\\\\src\\\\components\\\\loginSignUpPages\\\\LoginPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage({\n  setIsLoggedIn\n}) {\n  _s();\n\n  const [username, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoaded, setIsLoaded] = useState(\"\");\n  const history = useHistory();\n\n  const handleSubmit = e => {\n    e.preventDefault(); //If the user hasn't entered anything in the boxes, just return\n\n    if (username.length < 1 || password.length < 1) {\n      setIsLoaded(\"incorrect\");\n      return;\n    } //The following will attempt to log the user in\n\n\n    doFetch(); //The following is for testing purposes and is to simulate a call to the backend to log the user in\n    //setIsLoaded(\"incorrect\");\n\n    history.push(`/`); //setIsLoggedIn(true);\n  };\n\n  const doFetch = () => {\n    let jsonUn = JSON.stringify({\n      username: username\n    });\n    fetch(`http://localhost:5000/api/RetrieveUserForUsername/${username}`, {\n      method: \"get\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    }).then(res => res.json()).then(result => {\n      console.log(result);\n\n      if (password === result[0].password) {\n        setIsLoggedIn(true);\n      } else {\n        setIsLoggedIn(false);\n        setIsLoaded(\"incorrect\");\n      } //If error\n      // if (result.response.apiStatusCode !== \"OK\") {\n      //   setIsLoaded(\"error\");\n      //   //return;\n      // }\n      // //If the user is not logged in\n      // else if (result.response.data.loggedIn === 0) {\n      //   setIsLoggedIn(false);\n      //   setIsLoaded(\"incorrect\");\n      //   //return;\n      // }\n      // //The user is logged in\n      // else if (result.response.data.loggedIn === 1) {\n      //   setIsLoggedIn(true);\n      //   //return;\n      // }\n      // //We somehow made it down here, just print the invalid message\n      // else {\n      //   setIsLoaded(\"incorrect\");\n      //   setIsLoggedIn(false);\n      // }\n      //The user is logged in\n      //setIsLoggedIn(true);\n      //console.log(result);\n\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(\"error\");\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(PageWrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"formWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loginLabel\",\n        children: \"GURPS Random Generator Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"username\",\n          onChange: e => setUserName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputDiv\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"password\",\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mainBtn\",\n          onClick: handleSubmit,\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), isLoaded === \"error\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessage\",\n        children: \"Error logging in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), isLoaded === \"incorrect\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessage\",\n        children: \"Incorrect username or password. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginPage, \"1SthH2ORkwUODW4S0YAasoZkwVY=\", false, function () {\n  return [useHistory];\n});\n\n_c = LoginPage;\nconst PageWrapper = styled.nav`\n  /* .formWrapper {\n    display: flex !important;\n    justify-content: center !important;\n    height: 100% !important;\n    width: 100% !important;\n    flex-direction: column;\n    flex: 2;\n    align-items: stretch;\n    flex-grow: 1;\n  } */\n  .inputDiv {\n    margin-bottom: 5px;\n  }\n  .loginLabel {\n    font-size: 1.8rem;\n    font-weight: 400;\n    line-height: 1.5;\n    color: var(--mainBlack);\n  }\n`;\n_c2 = PageWrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginPage\");\n$RefreshReg$(_c2, \"PageWrapper\");","map":{"version":3,"sources":["C:/Users/sarah.diener/Desktop/School/CIS560/GroupProject/CIS560TeamProject/Frontend/gurpsfrontend/src/components/loginSignUpPages/LoginPage.js"],"names":["React","useState","styled","useHistory","LoginPage","setIsLoggedIn","username","setUserName","password","setPassword","isLoaded","setIsLoaded","history","handleSubmit","e","preventDefault","length","doFetch","push","jsonUn","JSON","stringify","fetch","method","headers","then","res","json","result","console","log","error","target","value","PageWrapper","nav"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function LoginPage({ setIsLoggedIn }) {\r\n  const [username, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isLoaded, setIsLoaded] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //If the user hasn't entered anything in the boxes, just return\r\n    if (username.length < 1 || password.length < 1) {\r\n      setIsLoaded(\"incorrect\");\r\n      return;\r\n    }\r\n    //The following will attempt to log the user in\r\n    doFetch();\r\n\r\n    //The following is for testing purposes and is to simulate a call to the backend to log the user in\r\n    //setIsLoaded(\"incorrect\");\r\n    history.push(`/`);\r\n    //setIsLoggedIn(true);\r\n  };\r\n\r\n  const doFetch = () => {\r\n    let jsonUn = JSON.stringify({ username: username });\r\n    fetch(`http://localhost:5000/api/RetrieveUserForUsername/${username}`, {\r\n      method: \"get\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Credentials\": true,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(result);\r\n          if (password === result[0].password) {\r\n            setIsLoggedIn(true);\r\n          } else {\r\n            setIsLoggedIn(false);\r\n            setIsLoaded(\"incorrect\");\r\n          }\r\n          //If error\r\n          // if (result.response.apiStatusCode !== \"OK\") {\r\n          //   setIsLoaded(\"error\");\r\n          //   //return;\r\n          // }\r\n          // //If the user is not logged in\r\n          // else if (result.response.data.loggedIn === 0) {\r\n          //   setIsLoggedIn(false);\r\n          //   setIsLoaded(\"incorrect\");\r\n          //   //return;\r\n          // }\r\n          // //The user is logged in\r\n          // else if (result.response.data.loggedIn === 1) {\r\n          //   setIsLoggedIn(true);\r\n          //   //return;\r\n          // }\r\n          // //We somehow made it down here, just print the invalid message\r\n          // else {\r\n          //   setIsLoaded(\"incorrect\");\r\n          //   setIsLoggedIn(false);\r\n          // }\r\n          //The user is logged in\r\n          //setIsLoggedIn(true);\r\n          //console.log(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(\"error\");\r\n          console.log(error);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <PageWrapper>\r\n      <form className=\"formWrapper\">\r\n        <div className=\"loginLabel\">GURPS Random Generator Login</div>\r\n        <div className=\"inputDiv\">\r\n          {/* <p>Username</p> */}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"username\"\r\n            onChange={(e) => setUserName(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"inputDiv\">\r\n          {/* <p>Password</p> */}\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button className=\"mainBtn\" onClick={handleSubmit}>\r\n            Sign in\r\n          </button>\r\n        </div>\r\n        {isLoaded === \"error\" && (\r\n          <div className=\"errorMessage\">Error logging in.</div>\r\n        )}\r\n        {isLoaded === \"incorrect\" && (\r\n          <div className=\"errorMessage\">\r\n            Incorrect username or password. Please try again.\r\n          </div>\r\n        )}\r\n      </form>\r\n    </PageWrapper>\r\n  );\r\n}\r\n\r\nconst PageWrapper = styled.nav`\r\n  /* .formWrapper {\r\n    display: flex !important;\r\n    justify-content: center !important;\r\n    height: 100% !important;\r\n    width: 100% !important;\r\n    flex-direction: column;\r\n    flex: 2;\r\n    align-items: stretch;\r\n    flex-grow: 1;\r\n  } */\r\n  .inputDiv {\r\n    margin-bottom: 5px;\r\n  }\r\n  .loginLabel {\r\n    font-size: 1.8rem;\r\n    font-weight: 400;\r\n    line-height: 1.5;\r\n    color: var(--mainBlack);\r\n  }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}